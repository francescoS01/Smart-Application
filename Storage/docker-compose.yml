services:

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - db-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    expose:
      - '29092'
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_MIN_INSYNC_REPLICAS: '1'
    networks:
      - db-network

  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic measurements --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic alerts --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
    networks:
      - db-network

  db:
    build: 
      context: .
      dockerfile: Warehouse.Dockerfile
    image: my-postgres-db
    depends_on:
      - init-kafka
    restart: always
    ports:
      - '5432:5432'
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    volumes:
      - postgresdata:/var/lib/postgresql/data
    networks:
      - db-network

  redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    networks:
      - db-network

  kafka-to-warehouse:
    build: 
      context: .
      dockerfile: kafka-to-warehouse.Dockerfile
    image: kafka-to-warehouse:latest
    restart: always
    environment:
      - KAFKA_HOST=kafka
      - POSTGRES_HOST=db
    depends_on:
      - db
      - init-kafka
    networks:
      - db-network
  
  redis-to-sql:
    build:
      context: .
      dockerfile: redis-to-sql.Dockerfile
    image: redis-to-sql:latest
    restart: always
    depends_on:
      - redis
      - db
    networks:
      - db-network


volumes:
  postgresdata:

networks:
  db-network:
    name: db-network

