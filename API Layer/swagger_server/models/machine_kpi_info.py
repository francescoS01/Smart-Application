# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.kpiid import KPIID  # noqa: F401,E501
from swagger_server.models.machine_kpi_info_series import MachineKPIInfoSeries  # noqa: F401,E501
from swagger_server import util


class MachineKPIInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, kpi: KPIID=None, series: List[MachineKPIInfoSeries]=None, code: int=None, error_message: str=None, unit: str=None):  # noqa: E501
        """MachineKPIInfo - a model defined in Swagger

        :param kpi: The kpi of this MachineKPIInfo.  # noqa: E501
        :type kpi: KPIID
        :param series: The series of this MachineKPIInfo.  # noqa: E501
        :type series: List[MachineKPIInfoSeries]
        :param code: The code of this MachineKPIInfo.  # noqa: E501
        :type code: int
        :param error_message: The error_message of this MachineKPIInfo.  # noqa: E501
        :type error_message: str
        :param unit: The unit of this MachineKPIInfo.  # noqa: E501
        :type unit: str
        """
        self.swagger_types = {
            'kpi': KPIID,
            'series': List[MachineKPIInfoSeries],
            'code': int,
            'error_message': str,
            'unit': str
        }

        self.attribute_map = {
            'kpi': 'kpi',
            'series': 'series',
            'code': 'code',
            'error_message': 'errorMessage',
            'unit': 'unit'
        }
        self._kpi = kpi
        self._series = series
        self._code = code
        self._error_message = error_message
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt) -> 'MachineKPIInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MachineKPIInfo of this MachineKPIInfo.  # noqa: E501
        :rtype: MachineKPIInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kpi(self) -> KPIID:
        """Gets the kpi of this MachineKPIInfo.


        :return: The kpi of this MachineKPIInfo.
        :rtype: KPIID
        """
        return self._kpi

    @kpi.setter
    def kpi(self, kpi: KPIID):
        """Sets the kpi of this MachineKPIInfo.


        :param kpi: The kpi of this MachineKPIInfo.
        :type kpi: KPIID
        """

        self._kpi = kpi

    @property
    def series(self) -> List[MachineKPIInfoSeries]:
        """Gets the series of this MachineKPIInfo.


        :return: The series of this MachineKPIInfo.
        :rtype: List[MachineKPIInfoSeries]
        """
        return self._series

    @series.setter
    def series(self, series: List[MachineKPIInfoSeries]):
        """Sets the series of this MachineKPIInfo.


        :param series: The series of this MachineKPIInfo.
        :type series: List[MachineKPIInfoSeries]
        """

        self._series = series

    @property
    def code(self) -> int:
        """Gets the code of this MachineKPIInfo.


        :return: The code of this MachineKPIInfo.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code: int):
        """Sets the code of this MachineKPIInfo.


        :param code: The code of this MachineKPIInfo.
        :type code: int
        """

        self._code = code

    @property
    def error_message(self) -> str:
        """Gets the error_message of this MachineKPIInfo.


        :return: The error_message of this MachineKPIInfo.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message: str):
        """Sets the error_message of this MachineKPIInfo.


        :param error_message: The error_message of this MachineKPIInfo.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def unit(self) -> str:
        """Gets the unit of this MachineKPIInfo.


        :return: The unit of this MachineKPIInfo.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit: str):
        """Sets the unit of this MachineKPIInfo.


        :param unit: The unit of this MachineKPIInfo.
        :type unit: str
        """

        self._unit = unit
