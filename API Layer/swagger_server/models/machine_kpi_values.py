# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.machine_kpi_values_values import MachineKPIValuesValues  # noqa: F401,E501
from swagger_server import util


class MachineKPIValues(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, values: List[MachineKPIValuesValues]=None, unit: str=None):  # noqa: E501
        """MachineKPIValues - a model defined in Swagger

        :param values: The values of this MachineKPIValues.  # noqa: E501
        :type values: List[MachineKPIValuesValues]
        :param unit: The unit of this MachineKPIValues.  # noqa: E501
        :type unit: str
        """
        self.swagger_types = {
            'values': List[MachineKPIValuesValues],
            'unit': str
        }

        self.attribute_map = {
            'values': 'values',
            'unit': 'unit'
        }
        self._values = values
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt) -> 'MachineKPIValues':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MachineKPIValues of this MachineKPIValues.  # noqa: E501
        :rtype: MachineKPIValues
        """
        return util.deserialize_model(dikt, cls)

    @property
    def values(self) -> List[MachineKPIValuesValues]:
        """Gets the values of this MachineKPIValues.


        :return: The values of this MachineKPIValues.
        :rtype: List[MachineKPIValuesValues]
        """
        return self._values

    @values.setter
    def values(self, values: List[MachineKPIValuesValues]):
        """Sets the values of this MachineKPIValues.


        :param values: The values of this MachineKPIValues.
        :type values: List[MachineKPIValuesValues]
        """

        self._values = values

    @property
    def unit(self) -> str:
        """Gets the unit of this MachineKPIValues.


        :return: The unit of this MachineKPIValues.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit: str):
        """Sets the unit of this MachineKPIValues.


        :param unit: The unit of this MachineKPIValues.
        :type unit: str
        """

        self._unit = unit
