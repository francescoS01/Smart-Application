# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.id import ID  # noqa: F401,E501
from swagger_server import util


class AlertMonitor(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, time_window: int=None, expression: str=None, machine_id: ID=None, monitor_uuid: str=None):  # noqa: E501
        """AlertMonitor - a model defined in Swagger

        :param time_window: The time_window of this AlertMonitor.  # noqa: E501
        :type time_window: int
        :param expression: The expression of this AlertMonitor.  # noqa: E501
        :type expression: str
        :param machine_id: The machine_id of this AlertMonitor.  # noqa: E501
        :type machine_id: ID
        :param monitor_uuid: The monitor_uuid of this AlertMonitor.  # noqa: E501
        :type monitor_uuid: str
        """
        self.swagger_types = {
            'time_window': int,
            'expression': str,
            'machine_id': ID,
            'monitor_uuid': str
        }

        self.attribute_map = {
            'time_window': 'timeWindow',
            'expression': 'expression',
            'machine_id': 'machineID',
            'monitor_uuid': 'monitorUUID'
        }
        self._time_window = time_window
        self._expression = expression
        self._machine_id = machine_id
        self._monitor_uuid = monitor_uuid

    @classmethod
    def from_dict(cls, dikt) -> 'AlertMonitor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AlertMonitor of this AlertMonitor.  # noqa: E501
        :rtype: AlertMonitor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def time_window(self) -> int:
        """Gets the time_window of this AlertMonitor.

        The time interval (in seconds) used as context for the expression evaluation, a window of 3600 evaluates the expression on the last hour  # noqa: E501

        :return: The time_window of this AlertMonitor.
        :rtype: int
        """
        return self._time_window

    @time_window.setter
    def time_window(self, time_window: int):
        """Sets the time_window of this AlertMonitor.

        The time interval (in seconds) used as context for the expression evaluation, a window of 3600 evaluates the expression on the last hour  # noqa: E501

        :param time_window: The time_window of this AlertMonitor.
        :type time_window: int
        """

        self._time_window = time_window

    @property
    def expression(self) -> str:
        """Gets the expression of this AlertMonitor.

        Expression involving KPIs and aggregation functions on a given machine  # noqa: E501

        :return: The expression of this AlertMonitor.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression: str):
        """Sets the expression of this AlertMonitor.

        Expression involving KPIs and aggregation functions on a given machine  # noqa: E501

        :param expression: The expression of this AlertMonitor.
        :type expression: str
        """

        self._expression = expression

    @property
    def machine_id(self) -> ID:
        """Gets the machine_id of this AlertMonitor.


        :return: The machine_id of this AlertMonitor.
        :rtype: ID
        """
        return self._machine_id

    @machine_id.setter
    def machine_id(self, machine_id: ID):
        """Sets the machine_id of this AlertMonitor.


        :param machine_id: The machine_id of this AlertMonitor.
        :type machine_id: ID
        """

        self._machine_id = machine_id

    @property
    def monitor_uuid(self) -> str:
        """Gets the monitor_uuid of this AlertMonitor.


        :return: The monitor_uuid of this AlertMonitor.
        :rtype: str
        """
        return self._monitor_uuid

    @monitor_uuid.setter
    def monitor_uuid(self, monitor_uuid: str):
        """Sets the monitor_uuid of this AlertMonitor.


        :param monitor_uuid: The monitor_uuid of this AlertMonitor.
        :type monitor_uuid: str
        """

        self._monitor_uuid = monitor_uuid
