# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.kpi_basic_info_with_numeric_id import KPIBasicInfoWithNumericID  # noqa: F401,E501
from swagger_server.models.machine_basic_info import MachineBasicInfo  # noqa: F401,E501
from swagger_server.models.machine_xkpi_info_relation import MachineXKPIInfoRelation  # noqa: F401,E501
from swagger_server import util


class MachineXKPIInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, machines: List[MachineBasicInfo]=None, kpis: List[KPIBasicInfoWithNumericID]=None, relation: List[MachineXKPIInfoRelation]=None):  # noqa: E501
        """MachineXKPIInfo - a model defined in Swagger

        :param machines: The machines of this MachineXKPIInfo.  # noqa: E501
        :type machines: List[MachineBasicInfo]
        :param kpis: The kpis of this MachineXKPIInfo.  # noqa: E501
        :type kpis: List[KPIBasicInfoWithNumericID]
        :param relation: The relation of this MachineXKPIInfo.  # noqa: E501
        :type relation: List[MachineXKPIInfoRelation]
        """
        self.swagger_types = {
            'machines': List[MachineBasicInfo],
            'kpis': List[KPIBasicInfoWithNumericID],
            'relation': List[MachineXKPIInfoRelation]
        }

        self.attribute_map = {
            'machines': 'machines',
            'kpis': 'kpis',
            'relation': 'relation'
        }
        self._machines = machines
        self._kpis = kpis
        self._relation = relation

    @classmethod
    def from_dict(cls, dikt) -> 'MachineXKPIInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MachineXKPIInfo of this MachineXKPIInfo.  # noqa: E501
        :rtype: MachineXKPIInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def machines(self) -> List[MachineBasicInfo]:
        """Gets the machines of this MachineXKPIInfo.


        :return: The machines of this MachineXKPIInfo.
        :rtype: List[MachineBasicInfo]
        """
        return self._machines

    @machines.setter
    def machines(self, machines: List[MachineBasicInfo]):
        """Sets the machines of this MachineXKPIInfo.


        :param machines: The machines of this MachineXKPIInfo.
        :type machines: List[MachineBasicInfo]
        """

        self._machines = machines

    @property
    def kpis(self) -> List[KPIBasicInfoWithNumericID]:
        """Gets the kpis of this MachineXKPIInfo.


        :return: The kpis of this MachineXKPIInfo.
        :rtype: List[KPIBasicInfoWithNumericID]
        """
        return self._kpis

    @kpis.setter
    def kpis(self, kpis: List[KPIBasicInfoWithNumericID]):
        """Sets the kpis of this MachineXKPIInfo.


        :param kpis: The kpis of this MachineXKPIInfo.
        :type kpis: List[KPIBasicInfoWithNumericID]
        """

        self._kpis = kpis

    @property
    def relation(self) -> List[MachineXKPIInfoRelation]:
        """Gets the relation of this MachineXKPIInfo.


        :return: The relation of this MachineXKPIInfo.
        :rtype: List[MachineXKPIInfoRelation]
        """
        return self._relation

    @relation.setter
    def relation(self, relation: List[MachineXKPIInfoRelation]):
        """Sets the relation of this MachineXKPIInfo.


        :param relation: The relation of this MachineXKPIInfo.
        :type relation: List[MachineXKPIInfoRelation]
        """

        self._relation = relation
