# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.ai_response_dashboard import AIResponseDashboard  # noqa: F401,E501
from swagger_server.models.ai_response_report import AIResponseReport  # noqa: F401,E501
from swagger_server import util


class AIResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, text: str=None, dashboard: AIResponseDashboard=None, report: AIResponseReport=None):  # noqa: E501
        """AIResponse - a model defined in Swagger

        :param type: The type of this AIResponse.  # noqa: E501
        :type type: str
        :param text: The text of this AIResponse.  # noqa: E501
        :type text: str
        :param dashboard: The dashboard of this AIResponse.  # noqa: E501
        :type dashboard: AIResponseDashboard
        :param report: The report of this AIResponse.  # noqa: E501
        :type report: AIResponseReport
        """
        self.swagger_types = {
            'type': str,
            'text': str,
            'dashboard': AIResponseDashboard,
            'report': AIResponseReport
        }

        self.attribute_map = {
            'type': 'type',
            'text': 'text',
            'dashboard': 'dashboard',
            'report': 'report'
        }
        self._type = type
        self._text = text
        self._dashboard = dashboard
        self._report = report

    @classmethod
    def from_dict(cls, dikt) -> 'AIResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AIResponse of this AIResponse.  # noqa: E501
        :rtype: AIResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this AIResponse.


        :return: The type of this AIResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this AIResponse.


        :param type: The type of this AIResponse.
        :type type: str
        """
        allowed_values = ["textual", "dashboard", "report"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def text(self) -> str:
        """Gets the text of this AIResponse.


        :return: The text of this AIResponse.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this AIResponse.


        :param text: The text of this AIResponse.
        :type text: str
        """

        self._text = text

    @property
    def dashboard(self) -> AIResponseDashboard:
        """Gets the dashboard of this AIResponse.


        :return: The dashboard of this AIResponse.
        :rtype: AIResponseDashboard
        """
        return self._dashboard

    @dashboard.setter
    def dashboard(self, dashboard: AIResponseDashboard):
        """Sets the dashboard of this AIResponse.


        :param dashboard: The dashboard of this AIResponse.
        :type dashboard: AIResponseDashboard
        """

        self._dashboard = dashboard

    @property
    def report(self) -> AIResponseReport:
        """Gets the report of this AIResponse.


        :return: The report of this AIResponse.
        :rtype: AIResponseReport
        """
        return self._report

    @report.setter
    def report(self, report: AIResponseReport):
        """Sets the report of this AIResponse.


        :param report: The report of this AIResponse.
        :type report: AIResponseReport
        """

        self._report = report
