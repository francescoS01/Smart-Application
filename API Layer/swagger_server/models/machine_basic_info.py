# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.id import ID  # noqa: F401,E501
from swagger_server import util


class MachineBasicInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: ID=None, machine_type: str=None, production_line: int=None, factory: str=None, name: str=None):  # noqa: E501
        """MachineBasicInfo - a model defined in Swagger

        :param id: The id of this MachineBasicInfo.  # noqa: E501
        :type id: ID
        :param machine_type: The machine_type of this MachineBasicInfo.  # noqa: E501
        :type machine_type: str
        :param production_line: The production_line of this MachineBasicInfo.  # noqa: E501
        :type production_line: int
        :param factory: The factory of this MachineBasicInfo.  # noqa: E501
        :type factory: str
        :param name: The name of this MachineBasicInfo.  # noqa: E501
        :type name: str
        """
        self.swagger_types = {
            'id': ID,
            'machine_type': str,
            'production_line': int,
            'factory': str,
            'name': str
        }

        self.attribute_map = {
            'id': 'id',
            'machine_type': 'machineType',
            'production_line': 'productionLine',
            'factory': 'factory',
            'name': 'name'
        }
        self._id = id
        self._machine_type = machine_type
        self._production_line = production_line
        self._factory = factory
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'MachineBasicInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MachineBasicInfo of this MachineBasicInfo.  # noqa: E501
        :rtype: MachineBasicInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> ID:
        """Gets the id of this MachineBasicInfo.


        :return: The id of this MachineBasicInfo.
        :rtype: ID
        """
        return self._id

    @id.setter
    def id(self, id: ID):
        """Sets the id of this MachineBasicInfo.


        :param id: The id of this MachineBasicInfo.
        :type id: ID
        """

        self._id = id

    @property
    def machine_type(self) -> str:
        """Gets the machine_type of this MachineBasicInfo.


        :return: The machine_type of this MachineBasicInfo.
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type: str):
        """Sets the machine_type of this MachineBasicInfo.


        :param machine_type: The machine_type of this MachineBasicInfo.
        :type machine_type: str
        """

        self._machine_type = machine_type

    @property
    def production_line(self) -> int:
        """Gets the production_line of this MachineBasicInfo.


        :return: The production_line of this MachineBasicInfo.
        :rtype: int
        """
        return self._production_line

    @production_line.setter
    def production_line(self, production_line: int):
        """Sets the production_line of this MachineBasicInfo.


        :param production_line: The production_line of this MachineBasicInfo.
        :type production_line: int
        """

        self._production_line = production_line

    @property
    def factory(self) -> str:
        """Gets the factory of this MachineBasicInfo.


        :return: The factory of this MachineBasicInfo.
        :rtype: str
        """
        return self._factory

    @factory.setter
    def factory(self, factory: str):
        """Sets the factory of this MachineBasicInfo.


        :param factory: The factory of this MachineBasicInfo.
        :type factory: str
        """

        self._factory = factory

    @property
    def name(self) -> str:
        """Gets the name of this MachineBasicInfo.


        :return: The name of this MachineBasicInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this MachineBasicInfo.


        :param name: The name of this MachineBasicInfo.
        :type name: str
        """

        self._name = name
