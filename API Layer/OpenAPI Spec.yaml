openapi: 3.0.3
info:
  title: Smart App Group C - API Layer
  description: |-
    This is the API used for internal communication between services and by external applications and tools to allow data access.
    Made by the integration team: Andrea Alberti, Anna Francesca Montagnoli, Matteo Simone
  version: 1.1.1
  
tags:
  - name: machine data
    description: methods for accessing machine data
  - name: machineXkpi
    description: Operations related to the relation between machines and KPI
  - name: KPI
    description: KPI related methods
  - name: user
    description: user data methods
  - name: alert
    description: alert related methods
  - name: report
    description: report related methods
  - name: data
    description: raw machine data methods
  - name: RAG
    description: RAG service operations
  
paths:
  
  /ai-query:
    post:
      tags:
        - RAG
      summary: Submits a query to the ai agent returning its response
      description: Submits a textual query to the ai agent returning a JSON response. The response type field determines the format of the content generated by the ai agent. The response may thus relate to a text, a graph or a report.
      operationId: AiQueryPost
      parameters:
        - name: query
          in: header
          required: true
          description: The textual query to send to the ai agent
          schema: 
            $ref: '#/components/schemas/AIQuery'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIResponse'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '500':
          $ref: '#/components/responses/ConnectionError'          
      security:
        - api_token_auth: []
          
  # /ai-query/{id}:
  #   get:
  #     tags:
  #       - RAG
  #     summary: Gets a single query by query ID
  #     description: ''
  #     operationId: AiQueryGet
  #     parameters:
  #       - $ref: '#/components/parameters/id'
  #     responses:
  #       "200":
  #         description: Successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Query'
  #       '401':
  #         $ref: '#/components/responses/AuthorizationError'
  #       "404":
  #         description: ID not found
  #     security:
  #       - api_token_auth: []
          
  # /ai-response:
  #   post:
  #     tags:
  #       - RAG
  #     summary: Posts the response generated by the AI agent
  #     description: ''
  #     operationId: AiResponsePost
  #     requestBody:
  #       description: 'Required Response object to post'
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/Response'
  #     responses:
  #       "200":
  #         description: Successful operation
  #       "400":
  #         description: Invalid Response object
  #       '401':
  #         $ref: '#/components/responses/AuthorizationError'
  #     security:
  #       - api_token_auth: []
          
  # /ai-response/{id}:
  #   get:
  #     tags:
  #       - RAG
  #     summary: Gets a response from response ID
  #     description: ''
  #     operationId: AiResponseGet
  #     parameters:
  #       - $ref: '#/components/parameters/id'
  #     responses:
  #       "200":
  #         description: Successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Response'
  #       '401':
  #         $ref: '#/components/responses/AuthorizationError'
  #       "404":
  #         description: ID not found
  #     security:
  #       - api_token_auth: []

  /machine:
    get:
      tags: 
        - machine data
      summary: Gets machine related informations
      description: Returns machine informations including status according to optional filters. The query can be restricted over machine ids, machine types, production lines, factories and machine status. A non specified parameter implies no selection will be performed over it. For efficiency purposes, if status data is not required, refer to /machine/summary instead.
      operationId: MachineGet
      parameters: 
        - $ref: '#/components/parameters/MachineIDFilter'
        - $ref: '#/components/parameters/MachineTypeFilter'
        - $ref: '#/components/parameters/ProductionLineFilter'
        - $ref: '#/components/parameters/FactoryFilter'
        - $ref: '#/components/parameters/StatusFilter'
      responses:
        '200':
          description: Succesful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MachineCompleteInfo'
        '400':
          $ref: '#/components/responses/ParametersError'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '500':
          $ref: '#/components/responses/ConnectionError'
      security:
        - api_token_auth: []
    post:
      tags:
        - machine data
      summary: Adds a new machine to the system
      description: Adds a new machine to the system by providing its informations. The created machine id will be returned in case of a successful request.
      operationId: MachinePost
      parameters:
        - name: name
          in: header
          required: true
          description: The name of the machine
          schema:
            type: string
            example: "Laser Welding Machine 10"
        - name: productionLine
          in: header
          required: true
          description: The production line of the machine
          schema:
            type: integer
            example: 2
        - name: factory
          in: header
          required: true
          description: The factory of the machine
          schema:
            type: string
            example: Factory X
        - name: machineType
          in: header
          required: true
          description: The machine type of the machine
          schema:
            type: string
            example: Laser Welding
        # - name: installDate
        #   in: header
        #   required: true
        #   description: Installation timestamp of the machine
        #   schema:
        #     type: string
        #     format: date-time
        #     example: "2023-11-20 08:00:00"
      responses:
        '201':
          $ref: '#/components/responses/ResourceCreated'
        '400':
          $ref: '#/components/responses/ParametersError'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/MachineNotFound'
        '500':
          $ref: '#/components/responses/ConnectionError'          
      security:
        - api_token_auth: []
    
  /machine/summary:
    get:
      tags: 
        - machine data
      summary: Gets basic machine informations
      description: Returns machine informations according to optional filters. The query can be restricted over machine ids, machine types, production lines and factories. A non specified parameter implies no selection will be performed over it.
      operationId: MachineSummaryGet
      parameters:
        - $ref: '#/components/parameters/MachineIDFilter'
        - $ref: '#/components/parameters/MachineTypeFilter'
        - $ref: '#/components/parameters/ProductionLineFilter'
        - $ref: '#/components/parameters/FactoryFilter'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type:
                  array
                items:
                  $ref: '#/components/schemas/MachineBasicInfo'
        '400':
          $ref: '#/components/responses/ParametersError'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '500':
          $ref: '#/components/responses/ConnectionError'          
      security:
        - api_token_auth: []
          
  /machine/status:
    get:
      tags: 
        - machine data
      summary: Gets status informations of machines
      description: Returns the status of all machines unless a list of machine ids is provided as filter, in which case only the requested machines status will be returned. The status of a machine indicates whether sensor data for it has not been collected for 30 hours.
      operationId: MachineStatusGet
      parameters:
        - $ref: '#/components/parameters/MachineIDFilter'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type:
                  array
                items:
                  type: object
                  properties:
                    id:
                      $ref: '#/components/schemas/ID'
                    status:
                      $ref: '#/components/schemas/MachineStatus'  
        '400':
          $ref: '#/components/responses/ParametersError'    
        '401':
          $ref: '#/components/responses/AuthorizationError'   
        '500':
          $ref: '#/components/responses/ConnectionError'          
      security:
        - api_token_auth: []
          
  /machine/{id}:
    get:
      tags:
        - machine data
      summary: Returns informations of a given machine
      description: Returns all informations of a machine given its id(including machine status, see /machine/status for details).
      operationId: MachineIdGet
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineCompleteInfo'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/MachineNotFound'
        '500':
          $ref: '#/components/responses/ConnectionError'          
      security:
        - api_token_auth: []
    put:
      tags:
        - machine data
      summary: Updates machine data
      description: Modifies the name, production line, factory and/or machine type of a given machine. If a parameter is not provided, the original machine data for it will be kept
      operationId: MachineIdPut
      parameters:
        - $ref: '#/components/parameters/id'
        - name: name
          in: header
          description: The updated name of the machine
          schema:
            type: string
            example: "Laser Welding Machine 10"
        - name: productionLine
          in: header
          description: The updated production line of the machine
          schema:
            type: integer
            example: 2
        - name: factory
          in: header
          description: The updated factory of the machine
          schema:
            type: string
            example: Factory X
        - name: machineType
          in: header
          description: The updated machine type of the machine
          schema:
            type: string
            example: Laser welding
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/ParametersError'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/MachineNotFound'
        '500':
          $ref: '#/components/responses/ConnectionError'          
      security:
        - api_token_auth: []
    delete:
      tags:
        - machine data
      summary: Deletes machine informations
      description: Deletes informations of a given machine
      operationId: MachineDelete
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/MachineNotFound'
        '500':
          $ref: '#/components/responses/ConnectionError'          
      security:
        - api_token_auth: []
  
  /machine/{id}/KPIList:
    get:
      tags:
        - machine data
      summary: Returns machine KPI list
      description: Returns the list of KPI supported by the machine according to its type. A KPI is considered as supported if the machine directly produces it or every KPI needed for its computation are supported by the machine.
      operationId: MachineIdKPIListGet
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type:
                  array
                items:
                  $ref: '#/components/schemas/KPIID'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/MachineNotFound'
        '500':
          $ref: '#/components/responses/ConnectionError'          
      security:
        - api_token_auth: []

  /machineXKPI:
    get:
      tags:
        - machineXkpi
      summary: Returns info on the relation between machines and KPIs
      description: Returns basic info on both machines and KPIs and the relation between them expressed as <machine id, KPI numerical id> pairs.
      operationId: MachineXKPIGet
      # parameters:
      #   - name: knownKPIs
      #     in: header
      #     description: Optional list of already known KPIs
      #     schema:
      #       type: array
      #       items:
      #         $ref: '#/components/schemas/KPIID'
      #       example: ["good_cycles", "power"]
      #   - name: knownMachines
      #     in: header
      #     description: Optional list of already known KPIs
      #     schema:
      #       type: array
      #       items:
      #         $ref: '#/components/schemas/ID'
      #       example: [1,2]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineXKPIInfo'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '500':
          $ref: '#/components/responses/ConnectionError'          
      security:
        - api_token_auth: []
          
  /KPI:
    get:
      tags:
        - KPI
      summary: Returns all supported KPI
      description: Returns the set of all KPI supported by the machines(directly produced or computed by the KPI engine), optionally filtered by KPI id and category. If the formula of a KPI is null, it is a basic KPI, otherwise can be computed by the KPI engine.
      operationId: KPIGet
      parameters:
        - name: kpiFilter
          in: header
          description: Optional list of KPI ids to restrict the query to
          schema:
            type: array
            items:
              type: string
              example: Power
            example: ["power"]
        - name: categoryFilter
          in: header
          description: Optional list of KPI categories to restrict the query to
          schema:
            type: array
            items:
              type: string
              example: Energy
            example: ["Energy"]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type:
                  array
                items:
                  $ref: '#/components/schemas/KPIBasicInfo'
        '400':
          $ref: '#/components/responses/ParametersError'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '500':
          $ref: '#/components/responses/ConnectionError'          
      security:
        - api_token_auth: []
    post:
      tags:
        - KPI
      summary: '[Unimplemented] Adds a new KPI to the system'
      description: ''
      operationId: KPIPost
      requestBody:
        description: 'Required KPI object to post'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KPIBasicInfo'
      responses:
        '201':
          $ref: '#/components/responses/ResourceCreated'
        '400':
          description: Invalid KPI object
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '500':
          $ref: '#/components/responses/ConnectionError'
      security:
        - api_token_auth: []

  /KPI/{KPIID}:
    get:
      tags:
        - KPI
      summary: Get basic informations on a given KPI
      description: Returns basic informations on a KPI given its name. A null formula implies it is a basic KPI.
      operationId: KpiIdGet
      parameters:
        - $ref: '#/components/parameters/KPIID'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KPIBasicInfo'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/KPINotFound'
        '500':
          $ref: '#/components/responses/ConnectionError'          
      security:
        - api_token_auth: []

  /KPI/{KPIID}/{machineID}/values:
    get:
      tags:
        - KPI
      summary: Returns a series of KPI values of a machine
      description: Returns a series of KPI values of a machine. A timeframe can be provided to only retrieve KPI data in the interval [start, end). This timeframe will be divided in intervals according to 'aggregationInterval' parameter. On each interval the function 'aggregationOp' will be applied, returning one item per interval. Checks will be performed to ensure the machine and KPI exist (in case they don't a 404 error will be returned) and the machine supports the KPI(in case this is false a 400 error will be returned).
      operationId: KpiIdMachineKPIValuesGet
      parameters:
        - $ref: '#/components/parameters/KPIID'
        - name: machineID
          in: path
          required: true
          description: ID of the machine
          schema:
            type: integer
            example: 1
        - $ref: '#/components/parameters/AggregationType'
        - $ref: '#/components/parameters/AggregationInterval'
        - name: startDate
          in: header
          description: The first timestamp of the time window of results 
          required: true
          schema:
            type: string
            format: date
            example:
              "2023-11-20"
        - name: endDate
          in: header
          description: The last timestamp of the time window of results 
          required: true
          schema:
            type: string
            format: date
            example:
              "2023-11-21"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineKPIValues'
        '400':
          $ref: '#/components/responses/ParametersError'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          description: KPI/machine not found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/MachineNotFoundError'
                  - $ref: '#/components/schemas/KPINotFoundError'
        '500':
          $ref: '#/components/responses/ConnectionError'          
      security:
        - api_token_auth: []
            
  /KPI/{KPIID}/machines:
    get:
      tags:
        - KPI
      summary: Returns machines that support KPI
      description: Returns the set of all machine ids supporting the KPI. A KPI is considered as supported if the machine directly produces it or every KPI needed for its computation are supported by the machine.
      operationId: KpiIdMachinesGet
      parameters:
        - $ref: '#/components/parameters/KPIID'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  ids:
                    type: array
                    items: 
                      $ref: '#/components/schemas/ID'
                  names:
                    type: array
                    items:
                      type: string
                      example: Cutting Machine 2
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/KPINotFound'
        '500':
          $ref: '#/components/responses/ConnectionError'          
      security:
        - api_token_auth: []

  /data/raw:
    get:
      tags:
        - data
      summary: Gets raw sensors data filtered by machine ID, data type (as KPI ids), and time window
      description: Access to basic KPI related to sensor data. The query can be restricted to specific machines and/or KPIs given their ids and a time window. The time window is interpreted as [from, to). Since KPIs are aggregated using multiple functions, 'aggregation selector' determines the type of aggregation to retrieve.
      operationId: DataGet
      parameters:
        - $ref: '#/components/parameters/MachineIDFilter'
        - $ref: '#/components/parameters/DataTypeFilter'
        - $ref: '#/components/parameters/RawDataAggregationSelector'
        - name: from
          in: header
          description: The first timestamp of the time window of results 
          schema:
            type: string
            format: date-time
            example:
              "2023-11-20 08:00:00"
        - name: to
          in: header
          description: The last timestamp of the time window of results 
          schema:
            type: string
            format: date-time
            example:
              "2023-11-21 08:00:00"
      responses:
        '200':
          description: Succesful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SensorData'
        '400':
          $ref: '#/components/responses/ParametersError'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '500':
          $ref: '#/components/responses/ConnectionError'          
      security:
        - api_token_auth: []
        
  /data/preprocessed:
    get:
      tags:
        - data
      summary: Gets preprocessed sensors data filtered by machine ID, data type (as KPI ids), and time window
      description: Access to basic KPI related to preprocessed sensor data. The query can be restricted to specific machines and/or KPIs given their ids and a time window. The time window is interpreted as [from, to). Since KPIs are aggregated using multiple functions, 'aggregation selector' determines the type of aggregation to retrieve.
      operationId: DataPreprocessedGet
      parameters:
        - $ref: '#/components/parameters/MachineIDFilter'
        - $ref: '#/components/parameters/DataTypeFilter'
        - $ref: '#/components/parameters/RawDataAggregationSelector'
        - name: from
          in: header
          description: The first timestamp of the time window of results 
          schema:
            type: string
            format: date-time
            example:
              "2023-11-20 08:00:00"
        - name: to
          in: header
          description: The last timestamp of the time window of results
          schema:
            type: string
            format: date-time
            example:
              "2023-11-21 08:00:00"
      responses:
        '200':
          description: Succesful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SensorData'
        '400':
          $ref: '#/components/responses/ParametersError'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '500':
          $ref: '#/components/responses/ConnectionError'          
      security:
        - api_token_auth: []

  /data/{KPIID}/{machineID}:
    post:
      tags:
        - data
      summary: Adds new sensor data to the system
      description: Adds new aggregated values of a KPI for a given machine id. AggregationType and values must be of the same length. 400 error will be returned if the machine can't generate such KPI.
      operationId: DataPost
      parameters:
        - $ref: '#/components/parameters/KPIID'
        - name: machineID
          in: path
          required: true
          description: ID of the machine
          schema:
            type: integer
            example: 1
        - name: aggregationType
          description: The aggregation types of the KPI values to be added
          required: true
          in: header
          schema:
            type: array
            items:
              type: string
              enum:
                - max
                - sum
                - min
                - avg
            example: ["sum", "min"]
        - name: values
          description: Aggregated values of the KPI
          required: true
          in: header
          schema:
            type: array
            items:
              type: number
            example: [4.5, 1]
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/ParametersError'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          description: KPI/machine not found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/MachineNotFoundError'
                  - $ref: '#/components/schemas/KPINotFoundError'
        '500':
          $ref: '#/components/responses/ConnectionError'          
      security:
        - api_token_auth: []
        
  /user:
    get:
      tags:
        - user
      summary: Returns user informations
      description: Returns the informations of the connected user
      operationId: UserGet
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBasicInfo'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '500':
          $ref: '#/components/responses/ConnectionError'          
      security:
        - api_token_auth: []
    post:
      tags:
        - user
      summary: Registers a new user account
      description: Registers a new user account and returns the id of the new account in the response body if successful.
      operationId: UserPost
      parameters:
        - name: username
          in: header
          required: true
          description: A username for subsequent access
          schema:
            type: string
            example: Fabrizio04
        - name: email
          in: header
          description: Email of the user
          required: true
          schema:
            type: string
        - name: firstName
          description: Name of the user
          in: header
          required: true
          schema:
            type: string
        - name: lastName
          description: Surname of the user
          in: header
          required: true
          schema:
            type: string
        - name: password
          description: Password of the user for subsequent access
          in: header
          required: true
          schema:
            type: string
        - name: role
          in: header
          required: true
          description: Role of the user
          schema:
            $ref: '#/components/schemas/UserRole'
      responses:
        '201':
          $ref: '#/components/responses/ResourceCreated'
        '400':
          $ref: '#/components/responses/ParametersError'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '500':
          $ref: '#/components/responses/ConnectionError'
      security:
        - api_token_auth: []

  /user/{id}:
    get:
      tags:
        - user
      summary: "[Unimplemented] Returns user informations"
      description: Returns informations of a user given their id
      operationId: UserIdGet
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBasicInfo'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '500':
          $ref: '#/components/responses/ConnectionError'
      security:
        - api_token_auth: []
    put:
      tags:
        - user
      summary: "[Unimplemented] Updates a user account"
      description: Updates informations of a user
      operationId: UserIdPut
      parameters:
        - $ref: '#/components/parameters/id'
        - name: username
          in: header
          schema:
            type: string
            example: Fabrizio04
        - name: email
          in: header
          schema:
            type: string
        - name: firstName
          in: header
          schema:
            type: string
        - name: lastName
          in: header
          schema:
            type: string
        - name: password
          in: header
          schema:
            type: string
        - name: role
          in: header
          description: The role of the user to add
          schema:
            $ref: '#/components/schemas/UserRole'
      responses:
        '200':
          description: Successful operation
        '400':
          $ref: '#/components/responses/ParametersError'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '500':
          $ref: '#/components/responses/ConnectionError'
      security:
        - api_token_auth: []
    delete:
      tags:
        - user
      summary: "[Unimplemented] Deletes a user"
      description: Deletes the user given its id
      operationId: UserIdDelete
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '500':
          $ref: '#/components/responses/ConnectionError'          
      security:
        - api_token_auth: []

  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: Attempts to log a user into the system given with their credentials. On success, returns a token that is needed in the 'Authorization' header of protected API calls. The token has a TTL.
      operationId: UserLoginPost
      parameters:
        - name: username
          in: header
          description: The username for login
          required: true
          schema:
            type: string
        - name: password
          in: header
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationInfo'
        '401':
          $ref: '#/components/responses/WrongUserPass'
        '500':
          $ref: '#/components/responses/ConnectionError'
          
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current user
      description: Logs out current user, invalidating their authentication token.
      operationId: UserLogoutGet
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '500':
          $ref: '#/components/responses/ConnectionError'
      security:
        - api_token_auth: []

  /alert:
    get:
      tags:
        - alert
      summary: Gets alerts fitered by machine ID, severity, and time window
      description: Returns informations related to alerts, optionally restricted to given machine ids, alert importance and time window.
      operationId: AlertGet
      parameters:
        - $ref: '#/components/parameters/MachineIDFilter'
        - name: severity
          in: header
          description: Alerts importance to restrict the query to.
          schema:
            $ref: '#/components/schemas/Severity'
        - name: from
          description: First timestamp of the time window of results
          in: header
          schema:
            type: string
            format: date-time
            example:
              "2023-11-20 08:00:00"
        - name: to
          description: Last timestamp of the time window of results
          in: header
          schema:
            type: string
            format: date-time
            example:
              "2023-11-21 08:00:00"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type:
                  array
                items:
                  $ref: '#/components/schemas/Alert'
        '400':
          $ref: '#/components/responses/ParametersError'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '500':
          $ref: '#/components/responses/ConnectionError'      
      security:
        - api_token_auth: []
    post:
      tags:
        - alert
      summary: Posts new alert
      description: Adds a new alert to the system. Checks for machine existence (404 if the machine doesn't exist). Returns the id of the added alert if successful.
      operationId: AlertPost
      parameters:
        - name: timestamp
          description: Time of generation of the alert
          in: header
          required: true
          schema:
            type: string
            format: date-time
            example:
              "2023-11-20 08:00:00"
        - name: machineID
          description: ID of the machine related to the new alert
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: severity
          description: Importance of the new alert
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/Severity'
        - name: description
          description: Description of the alert
          in: header
          required: true
          schema:
            type: string
        - name: KPI
          description: ID of the KPI or an expression with KPI IDs related to the new alert
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/KPIID'
      responses:
        '201':
          $ref: '#/components/responses/ResourceCreated'
        '400':
          $ref: '#/components/responses/ParametersError'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/MachineNotFound'
        '500':
          $ref: '#/components/responses/ConnectionError'
      security:
        - api_token_auth: []
  
  /alert/id/{id}:
    get:
      tags:
        - alert
      summary: Gets single alert by alert ID
      description: Gets informations on an alert given its id.
      operationId: AlertIdGet
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/AlertNotFound'
        '500':
          $ref: '#/components/responses/ConnectionError'
      security:
        - api_token_auth: []
            
  /alert/machine/{id}:
    get:
      tags:
        - alert
      summary: Returns alerts of a given machine
      description: Returns a list of alerts of a given machine(identified by its id), optionally filtered over a given time period. By default, all the alerts of such machine are returned.
      operationId: AlertMachineId
      parameters:
        - $ref: '#/components/parameters/id'
        - name: startTime
          in: header
          description: Starting time of the alerts
          schema:
            type: string
            format: date-time
            example:
              "2023-11-20 08:00:00"
        - name: endTime
          in: header
          description: Ending time of the alerts
          schema:
            type: string
            format: date-time
            example:
              "2023-11-21 08:00:00"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type:
                  array
                items:
                  $ref: '#/components/schemas/Alert'
        '400':
          $ref: '#/components/responses/ParametersError'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/AlertNotFound'
        '500':
          $ref: '#/components/responses/ConnectionError'
      security:
        - api_token_auth: []

  /alert/monitor:
    get:
      tags:
        - alert
      summary: Returns the list of monitored KPI expressions
      description: Returns the list of KPI expressions monitored by the KPI engine to fire alerts.
      operationId: AlertMonitorGet
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type:
                  array
                items:
                  $ref: '#/components/schemas/AlertMonitor'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '500':
          $ref: '#/components/responses/ConnectionError'
      security:
        - api_token_auth: []
    post:
      tags:
        - alert
      summary: Adds a new alert monitor
      description: Adds a new expression to the list of monitored expressions used to fire alerts.
      operationId: AlertMonitorPost
      parameters:
        - name: timeWindow
          in: header
          description: Time in seconds used to evaluate the expression, a window of 3600 evaluates the expression on the last hour
          schema:
            type: integer
            example: 36000
          required: true
        - name: expression
          in: header
          description: Expression involving KPIs and aggregation functions on a given machine
          schema:
            type: string
            example: sum(Good Cycles) > 1000
          required: true
        - name: machineID
          description: Id of the machine to monitor
          schema:
            $ref: '#/components/schemas/ID'
          in: header
          required: true
      responses:
        '201':
          $ref: '#/components/responses/ResourceCreatedUUID'
        '400':
          $ref: '#/components/responses/ParametersError'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '500':
          $ref: '#/components/responses/ConnectionError'
      security:
        - api_token_auth: []
        
  /alert/monitor/{uuid}:
    delete:
      tags:
        - alert
      summary: Removes a monitored expression
      description: Removes a monitored expression given its id.
      operationId: AlertMonitorIdDelete
      parameters:
        - $ref: '#/components/parameters/uuid'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/AlertMonitorNotFound'
        '500':
          $ref: '#/components/responses/ConnectionError'
      security:
        - api_token_auth: []

  # /alert/active:
  #   get:
  #     tags:
  #       - alert
  #     summary: Returns active alerts
  #     description: Returns the list of all active alerts
  #     operationId: AlertActiveGet
  #     responses:
  #       '200':
  #         description: Successful operation
  #         content:
  #           application/json:
  #             schema:
  #               type:
  #                 array
  #               items:
  #                 $ref: '#/components/schemas/Alert'
  #       '401':
  #         $ref: '#/components/responses/AuthorizationError'
  #     security:
  #       - api_token_auth: []
        
  /report:
    get:
      tags:
        - report
      summary: '[Unimplemented] Returns list of reports'
      description: Returns a list of reports. Optionally filtered over a given time period. By default, all the reports are returned
      operationId: ReportGet
      parameters:
        - name: startTime
          in: header
          description: Starting time of the reports
          schema:
            type: string
            format: date-time
            example:
              "2023-11-20 08:00:00"
        - name: endTime
          in: header
          description: Ending time of the reports
          schema:
            type: string
            format: date-time
            example:
              "2023-11-21 08:00:00"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type:
                  array
                items:
                  $ref: '#/components/schemas/ReportHeader'
        '400':
          $ref: '#/components/responses/ParametersError'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '500':
          $ref: '#/components/responses/ConnectionError'
      security:
        - api_token_auth: []

  /report/{id}:
    get:
      tags:
        - report
      summary: '[Unimplemented] Returnsreport data'
      description: Returns a report given its id
      operationId: ReportIdGet
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type:
                  array
                items:
                  $ref: '#/components/schemas/Report'
        '400':
          $ref: '#/components/responses/ParametersError'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          description: Report not found
        '500':
          $ref: '#/components/responses/ConnectionError'
      security:
        - api_token_auth: []

components:
  parameters:
    uuid:
      name: uuid
      in: path
      description: 'UUID of the resource'
      required: true
      schema:
        $ref: '#/components/schemas/UUID'
    id:
      name: id
      in: path
      description: 'ID of the resource'
      required: true
      schema: 
        $ref: '#/components/schemas/ID'
    KPIID:
      name: KPIID
      in: path
      description: 'ID of the KPI'
      required: true
      schema:
        $ref: '#/components/schemas/KPIID'
    MachineIDFilter:
      name: machines
      description: 'Specific machines to restrict the query to'
      in: header
      schema:
        $ref: '#/components/schemas/MachineIDFilter'
    DataTypeFilter:
      name: dataTypes
      description: 'Specific basic kpi to restrict the query to'
      in: header
      schema:
        $ref: '#/components/schemas/DataTypeFilter'
    MachineTypeFilter:
      name: machineTypes
      description: 'Specific machine types to restrict the query to'
      in: header
      schema:
        type:
          array
        items:
          type: string
          example: Laser Welding
      example: ["Laser Welding"]
    ProductionLineFilter:
      name: productionLines
      description: 'Specific production lines to restrict the query to'
      in: header
      schema:
        type:
          array
        items:
          type: integer
          example: 2
      example: [1]
    FactoryFilter:
      name: factories
      description: 'Specific factories to restrict the query to'
      in: header
      schema:
        type:
          array
        items:
          type: string
          example: Factory X
      example: ["Factory X"]
    StatusFilter:
      name: machineStatus
      description: 'Specific machine status to restrict the query to'
      in: header
      schema:
        $ref: '#/components/schemas/MachineStatus'
    AggregationInterval:
      description: Requested time granularity of KPI (defaults to day)
      in: header
      name: aggregationInterval
      schema:
        type: string
        enum:
          - day
          - week
          - month
          - year
          - overall
        example: day
    AggregationType:
      description: Aggregation function to perform (defaults to sum)
      in: header
      name: aggregationOp
      schema:
        $ref: '#/components/schemas/AggregationType'
    RawDataAggregationSelector:
      description: Aggregation type to retrieve
      in: header
      required: true
      name: aggregationSelector
      schema:
        type: string
        enum:
          - sum
          - avg
          - min
          - max
        example: sum
  responses:
    SuccessMessage:
      description: Success Message
      content:
        application/json:
          schema:
            type: string
            example: Success
    WrongUserPass:
      description: Wrong credentials error
      content:
        application/json:
          schema:
            type: string
            example: Wrong credentials
    AlertNotFound:
      description: User not found
      content:
        application/json:
          schema:
            type: string
            example: Alert not found
    UserNotFound: 
      description: User not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserNotFoundError'
    KPINotFound:
      description: KPI not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KPINotFoundError'
    MachineNotFound:
      description: Machine not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MachineNotFoundError'
    ResourceCreated:
      description: Resource created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ID'
    ResourceCreatedUUID:
      description: Resource created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UUID'
    AuthorizationError:
      description: Access token not valid
      content:
        application/json:
          schema:
            type: string
            example: Unauthorized
    ConnectionError:
      description: Can't connect to the requested service
      content:
        application/json:
          schema:
            type: string
            example: Connection Error
    ParametersError:
      description: Invalid parameters
      content:
        application/json:
          schema:
            type: string
            example: Invalid parameters
    AlertMonitorNotFound:
      description: Alert monitor not found
      content:
        application/json:
          schema:
            type: string
            example: Alert monitor not found
  schemas:
    UserNotFoundError:
      description: User not found error message
      type: string
      example: User not found
    MachineNotFoundError:
      description: Machine not found error message
      type: string
      example: Machine not found
    KPINotFoundError:
      description: KPI not found error message
      type: string
      example: KPI not found
    UUID:
      description: UUID of the resource
      type: string
      example: f9fe2b44-90a2-4c9a-dd0f-d8a913a31328
    ID:
      type: integer
      description: Numerical unique identifier of the resource
      format: int64
      example: 1
    KPIID:
      type: string
      description: A unique identifier of a KPI
      example: good_cycles
    KPIName:
      type: string
      description: Name of the KPI
      example: 'Good Cycles'
    AggregationType:
      type: string
      enum:
        - avg
        - max
        - min
        - sum
      example: sum
    AuthenticationInfo:
      type: string
      description: The authentication token to be used in subsequent API calls
      example: Bearer axi9enflrn
    AIQuery:
      type: string
      description: Textual query for the AI agent
      example: What is the total power consumed in the last week?
    DataTypeFilter:
      description: List of KPI ids
      type: array
      items:
        $ref: '#/components/schemas/KPIID'
      example: ["power", "good_cycles"]
    MachineIDFilter:
      description: List of machine identifiers
      type: array
      items:
          $ref: '#/components/schemas/ID'
      example: [1,2]
    MachineCompleteInfo:
      description: Holds informations of a machine
      allOf:
        - $ref: '#/components/schemas/MachineBasicInfo'
      type: object
      properties:
        status:
          $ref: '#/components/schemas/MachineStatus'
    MachineBasicInfo:
      description: Holds basic informations of a machine
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        machineType:
          type: string
          example: Laser cutter
        productionLine:
          type: integer
          example: 2
        factory:
          type: string
          example: Ghezzano Plant 1
        # installDate:
        #   type: string
        #   format: date-time
        #   example: "2023-11-20 08:00:00"
        name:
          type: string
          example: Laser Welding Machine 2
    MachineStatus:
      description: The status of a machine. A machine is considered operational if and only if sensor data for it has been received in the past 30 hours, otherwise it is conidered idle.
      type: string
      enum:
        - operational
        - idle
        # - off
        # - maintenance
      example: idle
    KPIBasicInfo:
      description: Basic informations of a KPI
      type: object
      properties:
        nameID:
          $ref: '#/components/schemas/KPIID'
        description:
          $ref: '#/components/schemas/KPIName'
        formula:
          description: the expression used to compute the KPI or null for KPIs that don't require additional computations.
          type: string
          example: 
        category:
          type: string
          example: Energy
        unit:
          description: Unit of measurement
          type: string
          example: W
    KPIBasicInfoWithNumericID:
      description: Holds informations of a KPI with an additional numerical id.
      allOf:
        - $ref: '#/components/schemas/KPIBasicInfo'
      type: object
      properties:
        relationNumber:
          $ref: '#/components/schemas/ID'
    MachineXKPIInfo:
      description: Basic informations of a set of machines and KPIs and their relationship (representing which machine can generate which KPIs). The relationship is made of couples of integers for efficiency purposes, but the kpi numerical id should not be used as kpi id for further requests (use nameID instead).
      type: object
      properties:
        machines:
          type: array
          items:
            $ref: '#/components/schemas/MachineBasicInfo'
        kpis:
          type: array
          items:
            $ref: '#/components/schemas/KPIBasicInfoWithNumericID'
        relation:
          type: array
          items:
            type: object
            properties:
              machineID:
                $ref: '#/components/schemas/ID'
              kpiID:
                $ref: '#/components/schemas/ID'
    UserBasicInfo:
      description: Basic informations of a user
      type: object
      properties:
        name:
          type: string
          example: Mario
        surename:
          type: string
          example: Rossi
        username:
          type: string
          example: mario.rossi
        email:
          type: string
          example: mario.rossi@example.it
        role:
          $ref: '#/components/schemas/UserRole'
    UserRole:
      description: Role of the user
      example: FFM
      type: string
      enum:
        - FFM
        - SMO
        - System
    Alert:
      description: Informations related to an alert
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        timestamp:
          type: string
          format: date-time
          example:
            "2023-11-20 08:00:00"
        machineID:
          type: integer
          example: 3
        severity:
          $ref: '#/components/schemas/Severity'
        alertDescription:
          type: string
          example: "Machine overheated"
        kpi:
          $ref: '#/components/schemas/KPIID'
    Severity:
      description: The importance degree of an alert
      type: string
      enum:
        - low
        - medium
        - high
      example: low
    MachineKPIValues:
      description: Informations of a KPI related to a machine id
      type: object
      properties:
        # machineID:
        #   $ref: '#/components/schemas/ID'
        # kpi: 
        #   $ref: '#/components/schemas/KPIID'
        # expression:
        #   description: The expression used to compute the KPI
        #    type: string
        #    example: sum(Power)
        values:
          type: array
          items:
            type: object
            properties:
              # timeInterval:
              #   type: string
              #   description: interval related to the value
              #   example: 2024-10-14/2024-10-19
              startDate:
                type: string
                example: 2024-10-14
              endDate:
                type: string
                example: 2024-10-19
              value:
                type: number
                example: 27.5
        unit:
          type: string
          example: W
        
    ReportHeader:
      description: Basic report information useful for small download
      type: object
      properties:
        id:
          type: integer
        creationTime:
          type: string
        title:
          type: string
    Report:
      description: Full report data
      type: object
      properties:
        header:
          $ref: '#/components/schemas/ReportHeader'
        data:
          type: object
    SensorKPIItem:
      description: Couple of KPI id and value
      type: object
      properties:
        kpi:
          $ref: '#/components/schemas/KPIID'
        value:
          type: number
          example: 4.5
    SensorMeasurement:
      description: Array of KPIs and values for them
      type: array
      items:
        $ref: '#/components/schemas/SensorKPIItem'
    SensorData:
      description: Series of values of a KPI generated by a machine. The i-th timestamp is related to the i-th value.
      type: object
      properties:
        machineID:
          $ref: '#/components/schemas/ID'
        kpi:
          $ref: '#/components/schemas/KPIID'
        timestampSeries:
          type: array
          items:
            type: string
            format: date-time
            example:
              "2023-11-20 08:00:00"
        valueSeries:
          type: array
          items:
            type: number
            example: 4.5
    AlertMonitor:
      description: Informations related to an expression monitored by the KPI engine used to fire alets. An alert will be fired if the expression on a machine is evaluated to True.
      type: object
      properties:
        timeWindow:
          description: The time interval (in seconds) used as context for the expression evaluation, a window of 3600 evaluates the expression on the last hour
          type: integer
          example: 100000
        expression:
          description: Expression involving KPIs and aggregation functions on a given machine
          type: string
          example: sum(Good Cycles) > 1000
        machineID:
          $ref: '#/components/schemas/ID'
        monitorUUID:
          $ref: '#/components/schemas/UUID'
    AIResponse:
      type: object
      properties:
        type:
          type: string
          enum:
            - textual
            - dashboard
            - report
          example: textual
        text:
          type: string
          example: The total power consumed last week by all machines is 1000 kWh
        dashboard:
          type: object
          properties:
            x_axis_name:
              type: string
            y_axis_name:
              type: string
            values:
              oneOf:
                - type: object
                  properties:
                    x:
                      type: string
                      format: date
                      example: 2024-03-01
                    y:
                      type: number
                      example: 2.5
                - type: object
                  properties:
                    start_date:
                      type: string
                      format: date
                      example: 2024-03-01
                    end_date:
                      type: string
                      format: date
                      example: 2024-03-08
                    value:
                      type: number
                      example: 1.4
                    
          example:
        report:
          type: object
          properties:
            title:
              type: string
            sections:
              type: object
              properties:
                Key Performance Metrics:
                  type: array
                  items: 
                    type: string
                Overall Trends:
                  type: array
                  items: 
                    type: string
                Observations:
                  type: array
                  items: 
                    type: string
          example:
  securitySchemes:
    api_token_auth:
      type: http
      scheme: bearer
    machine_auth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://SA2024C.com/oauth/authorize #TODO placeholder
          tokenUrl: https://SA2024C.com/oauth/token #TODO placeholder
          scopes:
            read:machine: Read machine data
            write:machine: Write machine data
            read:KPI: Read KPI data
            write:KPI: Write KPI data
            read:user: Access user data
            write:user: Modify user data
            read:alert: Read alert data
            write:alert: Edit alert data
            read:report: Read SMO report data
            write:report: Edit report data
            read:data: Access raw data
        clientCredentials:
          tokenUrl: https://SA2024C.com/oauth/token
          scopes:
            read:machine: Read machine data
            write:machine: Write machine data
            read:KPI: Read KPI data
            write:KPI: Write KPI data
            read:user: Access user data
            write:user: Modify user data
            read:alert: Read alert data
            write:alert: Edit alert data
            read:report: Read SMO report data
            write:report: Edit report data
            read:aiquery: Get ai query responses
            write:aiquery: Request new ai queries
            read:data: Access raw data
